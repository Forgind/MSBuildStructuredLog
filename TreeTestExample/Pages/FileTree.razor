@page "/FileTree"
@using System.IO
@using System.Collections
@using Microsoft.Build.Logging.StructuredLogger
@using Radzen
@using Radzen.Blazor
@inject Blazor.FileReader.IFileReaderService fileReaderService
@inject NotificationService notificationService

<center>
    <h1>Structured Log Viewer</h1>
    <input type="file" @ref=inputElement />
    <button @onclick=ReadFile class="btn btn-primary">Read file</button>
    <button @onclick=ClearFile class="btn btn-primary">Clear</button>
    <br />
    <br />
    @if (reading)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
        <h3>@waitText</h3>
    }
</center>


<h1>@test</h1>
<br />
<br />
@if (binLogSelected)
{
    <RadzenTree Data="@entries" Style="word-break:break-all;overflow-y:scroll" Expand="@((TreeExpandEventArgs args) => {OnExpand(args);})">
        <RadzenTreeLevel Template="@TreeFormatting.TreeDesign" Text="@GetTextForNode" Selected="@((node) => { return ((BaseNode)node).IsSelected; })"
                         HasChildren="@((node) => {
                                    if (node is TreeNode)
                                        return ((TreeNode)node).HasChildren;
                                    else return false;
                                })" />
    </RadzenTree>
}
<RadzenNotification />

@code {
    bool binLogSelected = false;
    ElementReference inputElement;
    static string test;
    bool reading;
    string waitText;

    [CascadingParameter]
    public SplitPane ContainerSplit { get; set; }

    IEnumerable<BaseNode> entries = null;

    async System.Threading.Tasks.Task ShowNotification(NotificationMessage message)
    {
        message.Severity = NotificationSeverity.Error;
        message.Summary = "Wrong File Type!";
        message.Detail = "Currently we only read .binlog files. Click Instructions to learn more.";
        message.Duration = 4000;
        notificationService.Notify(message);
    }


    public static string GetTextForNode(Object node)
    {
        return TreeFormatting.TextSelector(node);
    }

    public static void OnExpand(TreeExpandEventArgs args)
    {
        TreeFormatting.OnExpand(args);
    }

    public async System.Threading.Tasks.Task ClearFile()
    {
        await fileReaderService.CreateReference(inputElement).ClearValue();
        binLogSelected = false;
        reading = false;
        waitText = "";
        entries = null;
    }

    public async System.Threading.Tasks.Task ReadFile()
    {
        binLogSelected = false;
        reading = true;
        this.StateHasChanged();
        waitText = "Here we go...";
        var files = (await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync());
        foreach (Blazor.FileReader.IFileReference file in files)
        {
            var fileInfo = await file.ReadFileInfoAsync();
            String[] split = fileInfo.Name.Split(".");
            if (!String.Equals("binlog", split[split.Length - 1]))
            {
                await ShowNotification(new NotificationMessage());
                await ClearFile();
                break;
            }
            waitText = "Still reading...";
            this.StateHasChanged();
            binLogSelected = true;
            Task<Blazor.FileReader.AsyncDisposableStream>
            streamTask = file.OpenReadAsync();
            var stream = await streamTask;
            var memoryStream = new MemoryStream();
            waitText = "Teaching you patience...";
            this.StateHasChanged();
            await stream.CopyToAsync(memoryStream);

            memoryStream.Position = 0;

            Build build = Serialization.ReadBinLog(memoryStream);
            SearchViewer.searcher = new StructuredLogViewer.Search(build, StructuredLogViewer.Search.DefaultMaxResults);
            waitText = "Trust me you're computer wants this to be over more than you do...";
            this.StateHasChanged();
            BuildAnalyzer.AnalyzeBuild(build);
            waitText = "Not a joke...We're actually still reading...";
            this.StateHasChanged();
            entries = (IEnumerable<BaseNode>)build.Children;
        }
        this.StateHasChanged();
        reading = false;
        waitText = "";
    }
}
