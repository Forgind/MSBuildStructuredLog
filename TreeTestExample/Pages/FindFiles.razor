@page "/findInFiles"
@using StructuredLogViewer
@using StructuredLogViewer.Core
@using System.Collections
@using Microsoft.Build.Logging.StructuredLogger
@using System.IO

<RadzenTextBox Value=@search Placeholder="Search..." Change="@(args => Change(args, "TextBox with placeholder"))" Style="margin-bottom: 20px" />
<br />
<br />
<RadzenTree Data="@findResults" 
            Style="word-break:break-all;overflow-y:scroll;color:black" 
            Expand="@((TreeExpandEventArgs args) => {ExpandResults(args);})"
            Change="@OnChange">
    <RadzenTreeLevel Expanded="@((obj) => (obj is TreeNode && ((TreeNode)obj).HasChildren))" Template="@TreeFormatting.TreeDesign" Text="@TreeFormatting.TextSelector"
                     HasChildren="@((node) => {
                                    if (node is TreeNode)
                                        return ((TreeNode)node).HasChildren;
                                    else return false;
                                })" />
</RadzenTree>

@code {
    [CascadingParameter]
    public SplitPane ContainerSplit { get; set; }
    public static IEnumerable<BaseNode> findResults;
    public static string search;

    void OnChange(TreeEventArgs args)
    {
        // ContainerSplit.selected = ((ProxyNode)(args.Value)).Original;
        ContainerSplit.selected = (BaseNode)args.Value;
        ContainerSplit.sfrOrafr = 1;
        SourceFileText();
        if (ContainerSplit.show % 2 == 0)
        {
            ContainerSplit.show += 1;
            ContainerSplit.Render();
        }
        ContainerSplit.FileRender();

    }

    void Change(string value, string name)
    {
        if (value != null)
        {
            search = value;
        }
        var results = FindInFiles(value, 1000, new System.Threading.CancellationToken());
        findResults = (IEnumerable<BaseNode>) BuildFindResults(results, true, value);
    }

    public static void ExpandResults(TreeExpandEventArgs args)
    {
        TreeFormatting.OnExpand(args);
        if (args.Value is TreeNode && ((TreeNode)(args.Value)).HasChildren)
        {
            args.Children.Expanded = (obj) => (obj is TreeNode && ((TreeNode)obj).HasChildren);
        }
    }

    private object FindInFiles(string searchText, int maxResults, System.Threading.CancellationToken cancellationToken)
    {
        var results = new List<(string, IEnumerable<(int, string)>)>();
        ArchiveFileResolver archiveFile = ContainerSplit.afr;

        foreach (var file in archiveFile.Files)
        {
            if (cancellationToken.IsCancellationRequested)
            {
                return null;
            }

            var haystack = file.Value;
            var resultsInFile = haystack.Find(searchText);
            if (resultsInFile.Count > 0)
            {
                results.Add((file.Key, resultsInFile.Select(lineNumber => (lineNumber, haystack.GetLineText(lineNumber)))));
            }
        }

        return results;
    }

    private IEnumerable BuildFindResults(object resultsObject, bool moreAvailable, string searchText)
    {
        if (resultsObject == null)
        {
            return null;
        }

        var results = resultsObject as IEnumerable<(string, IEnumerable<(int, string)>)>;

        var root = new Folder();

        if (results != null)
        {
            foreach (var file in results)
            {
                var folder = new Microsoft.Build.Logging.StructuredLogger.SourceFile
                {
                    Name = Path.GetFileName(file.Item1),
                    SourceFilePath = file.Item1,
                };
                root.AddChild(folder);
                foreach (var line in file.Item2)
                {
                    var sourceFileLine = new SourceFileLine()
                    {
                        LineNumber = line.Item1 + 1,
                        LineText = line.Item2
                    };
                    folder.AddChild(sourceFileLine);
                }
            }
        }

        if (!root.HasChildren && !string.IsNullOrEmpty(searchText))
        {
            root.Children.Add(new Message { Text = "No results found." });
        }

        return root.Children;
    }

    public void SourceFileText()
    {
        StructuredLogViewer.SourceFileResolver sourceFileResolver = ContainerSplit.sourceFileResolver;
        string path = "";
        BaseNode bn = (BaseNode)ContainerSplit.selected;
        ContainerSplit.SourceFileText = null;
        ContainerSplit.sfn = "";

        if (bn is AbstractDiagnostic)
        {
            AbstractDiagnostic ad = (AbstractDiagnostic)bn;
            path = ad.ProjectFile;
            if (ad.IsTextShortened)
            {
                ContainerSplit.SourceFileText = ad.Text;
                ContainerSplit.sfn = ad.ShortenedText;
                ContainerSplit.lineNumber = ad.LineNumber;
            }
            else
            {

                if (ContainerSplit.sfrOrafr == 0)
                {
                    ContainerSplit.SourceFileText = sourceFileResolver.GetSourceFileText(path).Text;
                }
                else if (ContainerSplit.sfrOrafr == 1)
                {
                    ContainerSplit.SourceFileText = ContainerSplit.afr.GetSourceFileText(path).Text;
                }
                ContainerSplit.sfn = ad.Name;
                ContainerSplit.lineNumber = ad.LineNumber;
            }
        }
        else if (bn is Project)
        {
            path = ((Project)bn).SourceFilePath;
            ContainerSplit.sfn = ((Project)bn).Name;


            if (ContainerSplit.sfrOrafr == 0)
            {
                ContainerSplit.SourceFileText = sourceFileResolver.GetSourceFileText(path).Text;
            }
            else if (ContainerSplit.sfrOrafr == 1)
            {
                ContainerSplit.SourceFileText = ContainerSplit.afr.GetSourceFileText(path).Text;
            }
        }
        else if (bn is Target)
        {
            path = ((Target)ContainerSplit.selected).SourceFilePath;
            ContainerSplit.sfn = ((Target)bn).Name;

            if (ContainerSplit.sfrOrafr == 0)
            {
                ContainerSplit.SourceFileText = sourceFileResolver.GetSourceFileText(path).Text;
            }
            else if (ContainerSplit.sfrOrafr == 1)
            {
                ContainerSplit.SourceFileText = ContainerSplit.afr.GetSourceFileText(path).Text;
            }
        }
        else if (bn is Microsoft.Build.Logging.StructuredLogger.Task)
        {
            path = ((Microsoft.Build.Logging.StructuredLogger.Task)bn).SourceFilePath;
            ContainerSplit.sfn = ((Microsoft.Build.Logging.StructuredLogger.Task)bn).Name;

            if (ContainerSplit.sfrOrafr == 0)
            {
                ContainerSplit.SourceFileText = sourceFileResolver.GetSourceFileText(path).Text;
            }
            else if (ContainerSplit.sfrOrafr == 1)
            {
                ContainerSplit.SourceFileText = ContainerSplit.afr.GetSourceFileText(path).Text;
            }
        }
        else if (bn is IHasSourceFile && ((IHasSourceFile)bn).SourceFilePath != null)
        {
            path = ((IHasSourceFile)bn).SourceFilePath;
            ContainerSplit.sfn = ((IHasSourceFile)bn).SourceFilePath;

            if (ContainerSplit.sfrOrafr == 0)
            {
                ContainerSplit.SourceFileText = sourceFileResolver.GetSourceFileText(path).Text;
            }
            else if (ContainerSplit.sfrOrafr == 1)
            {
                ContainerSplit.SourceFileText = ContainerSplit.afr.GetSourceFileText(path).Text;
            }
        }
        else if (bn is SourceFileLine && ((SourceFileLine)bn).Parent is Microsoft.Build.Logging.StructuredLogger.SourceFile
        && ((Microsoft.Build.Logging.StructuredLogger.SourceFile)((SourceFileLine)bn).Parent).SourceFilePath != null)
        {
            path = ((Microsoft.Build.Logging.StructuredLogger.SourceFile)((SourceFileLine)bn).Parent).SourceFilePath;
            ContainerSplit.sfn = ((Microsoft.Build.Logging.StructuredLogger.SourceFile)((SourceFileLine)bn).Parent).Name;
            ContainerSplit.lineNumber = ((SourceFileLine)bn).LineNumber;
            if (ContainerSplit.sfrOrafr == 0)
            {
                ContainerSplit.SourceFileText = sourceFileResolver.GetSourceFileText(path).Text;
            }
            else if (ContainerSplit.sfrOrafr == 1)
            {
                ContainerSplit.SourceFileText = ContainerSplit.afr.GetSourceFileText(path).Text;
            }
        }
        else if (bn is NameValueNode && ((NameValueNode)bn).IsValueShortened)
        {
            ContainerSplit.SourceFileText = ((NameValueNode)bn).Value;
            ContainerSplit.sfn = ((NameValueNode)bn).Name;

        }
        else if (bn is TextNode && ((TextNode)bn).IsTextShortened)
        {
            ContainerSplit.SourceFileText = ((TextNode)bn).Text;
            ContainerSplit.sfn = ((TextNode)bn).Name;
            
        }

        if (ContainerSplit.SourceFileText == null)
        {
            ContainerSplit.SourceFileText = "No file to display";
        }
        ContainerSplit.sfrOrafr = -1;
    }

}
