@page "/SourceFile"
@using Microsoft.Build.Logging.StructuredLogger
@using StructuredLogViewer
@using System.IO

<button @onclick=Exit class="btn btn-primary">Close</button>

<MonacoEditor>
    @text
</MonacoEditor>

@code {
    [CascadingParameter]
    public SplitPane ContainerSplit { get; set; }
    string text;

    public void Render()
    {
        this.StateHasChanged();
    }

    public async System.Threading.Tasks.Task Exit()
    {
        ContainerSplit.show += 1;
        ContainerSplit.Render();
    }

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        SourceFileResolver sourceFileResolver = new SourceFileResolver(ContainerSplit.build.SourceFilesArchive);
        //if (CanView(ContainerSplit.selected, sourceFileResolver) && CanOpenFile(ContainerSplit.selected, sourceFileResolver))
        //{
        string path = "";
        BaseNode bn = (BaseNode)ContainerSplit.selected;

        if (bn is AbstractDiagnostic)
        {
            AbstractDiagnostic ad = (AbstractDiagnostic)bn;
            path = ad.ProjectFile;
            if (ad.IsTextShortened)
            {
                text = ad.Text;
            } else
            {
                text = sourceFileResolver.GetSourceFileText(path).Text;
            }
        }
        else if (bn is Project)
        {
            path = ((Project)bn).SourceFilePath;
            text = sourceFileResolver.GetSourceFileText(path).Text;
        }
        else if (bn is Target)
        {
            path = ((Target)ContainerSplit.selected).SourceFilePath;
            text = sourceFileResolver.GetSourceFileText(path).Text;
        }
        else if (bn is Microsoft.Build.Logging.StructuredLogger.Task)
        {
            path = ((Microsoft.Build.Logging.StructuredLogger.Task)bn).SourceFilePath;
            text = sourceFileResolver.GetSourceFileText(path).Text;
        } else if (bn is IHasSourceFile && ((IHasSourceFile)bn).SourceFilePath != null)
        {
            path = ((IHasSourceFile)bn).SourceFilePath;
            text = sourceFileResolver.GetSourceFileText(path).Text;
        }
        else if (bn is SourceFileLine && ((SourceFileLine)bn).Parent is Microsoft.Build.Logging.StructuredLogger.SourceFile
        && ((Microsoft.Build.Logging.StructuredLogger.SourceFile)((SourceFileLine)bn).Parent).SourceFilePath != null)
        {
            path = ((Microsoft.Build.Logging.StructuredLogger.SourceFile)((SourceFileLine)bn).Parent).SourceFilePath;
            text = sourceFileResolver.GetSourceFileText(path).Text;
        }
        else if (bn is NameValueNode && ((NameValueNode)bn).IsValueShortened)
        {
            text = ((NameValueNode)bn).Value;
        }
        else if (bn is TextNode && ((TextNode)bn).IsTextShortened)
        {
            text = ((TextNode)bn).Text;
        }

        if (text == null)
        {
            text = "No file to display";
        }
        //}
    }

    private bool CanOpenFile(BaseNode node, SourceFileResolver sourceFileResolver)
    {
        return node is Import i && sourceFileResolver.HasFile(i.ImportedProjectFilePath);
    }

    private bool CanView(BaseNode node, SourceFileResolver sourceFileResolver)
    {
        return node is AbstractDiagnostic
            || node is Project
            || (node is Target t && t.SourceFilePath != null && sourceFileResolver.HasFile(t.SourceFilePath))
            || (node is Microsoft.Build.Logging.StructuredLogger.Task task && task.Parent is Target parentTarget && sourceFileResolver.HasFile(parentTarget.SourceFilePath))
            || (node is IHasSourceFile ihsf && ihsf.SourceFilePath != null && sourceFileResolver.HasFile(ihsf.SourceFilePath))
            || (node is NameValueNode nvn && nvn.IsValueShortened)
            || (node is TextNode tn && tn.IsTextShortened);
    }
}
