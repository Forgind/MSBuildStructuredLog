@page "/home"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager 

    <CascadingValue Value=this>

        <body style="height:100%">
            <div>
                <div @ref="one" style="overflow-y:scroll" class="split" id="one">
                    @DrawTabs()
                </div>
                <div style="overflow-y:scroll" @ref="two" class="split" id="two">
                    <FileTree />
                </div>
                @if (show % 2 == 1)
                {
                    <div style="overflow-y:hidden" @ref="three" class="split" id="three">
                        @DrawSources()
                    </div>
                }
            </div>
        </body>

    </CascadingValue>



        @code {
            public int show;
            protected ElementReference one;
            protected ElementReference two;
            protected ElementReference three;
            public bool search;
            public Microsoft.Build.Logging.StructuredLogger.Build build;
            public Microsoft.Build.Logging.StructuredLogger.BaseNode selected;
            private SourceFile sf;
            private Tabs tabs;
            public StructuredLogViewer.ArchiveFileResolver afr;
            public StructuredLogViewer.SourceFileResolver sourceFileResolver;
            public IEnumerable<Microsoft.Build.Logging.StructuredLogger.BaseNode> files;
            public string SourceFileText;
            public string sfn;
            //0 is sfr 1 is afr -1 neither
            public int sfrOrafr = -1;
            public int lineNumber = -1;


            public void Render()
            {
                this.StateHasChanged();
                if (sf != null)
                {
                    sf.Render();
                }
            }

            public async void FileRender()
            {
                if (sf != null)
                {
                    sf.Render();
                    await sf.changeHighlight(sf._editor);
                }
            }

            public RenderFragment DrawTabs()
            {
                return new RenderFragment(builder =>
                {
                    builder.OpenComponent<Tabs>(0);
                    builder.AddComponentReferenceCapture(1, inst => { tabs = (Tabs)inst; });
                    builder.CloseComponent();
                });
            }

            public RenderFragment DrawSources()
            {
                return new RenderFragment(builder =>
                {
                    builder.OpenComponent<SourceFile>(0);
                    builder.AddComponentReferenceCapture(1, inst => { sf = (SourceFile)inst; });
                    builder.CloseComponent();
                });
            }

            protected override async Task OnAfterRenderAsync(bool firstRender)
            {
                if (show % 2 == 0 && !search)
                {
                    if (!firstRender)
                    {
                        await JSRuntime.InvokeVoidAsync("blazorHelpers.Destroy");
                    }
                    ElementReference[] arr2 = new ElementReference[2];
                    arr2[0] = one;
                    arr2[1] = two;
                    await JSRuntime.InvokeVoidAsync(identifier: "blazorHelpers.Split", arr2);
                }
                if (show % 2 == 1 && !search)
                {
                    await JSRuntime.InvokeVoidAsync("blazorHelpers.Destroy");
                    ElementReference[] arr = new ElementReference[3];
                    arr[0] = one;
                    arr[1] = two;
                    arr[2] = three;
                    await JSRuntime.InvokeVoidAsync(identifier: "blazorHelpers.Split", arr);
                }
                search = false;
            }
        }
