@page "/SourceFile"
@using Microsoft.Build.Logging.StructuredLogger
@using StructuredLogViewer
@using System.IO

@ContainerSplit.sfn
<div align="right">
    <button @onclick=Exit class="btn btn-primary">Close</button>
</div>
<br />

<MonacoEditor @ref="_editor" CssClass="code" Id="monaco-editor" ConstructionOptions="EditorConstructionOptions" />


@code {
    [CascadingParameter]
    public SplitPane ContainerSplit { get; set; }
    private MonacoEditor _editor { get; set; }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions()
        {
            Value = ContainerSplit.SourceFileText
        };
    }

    protected override bool ShouldRender()
    {
        var renderUI = true;

        return renderUI;
    }

    public void Render()
    {
        this.StateHasChanged();
        //SourceFileResolver sourceFileResolver = ContainerSplit.sourceFileResolver;
        //string path = "";
        //BaseNode bn = (BaseNode)ContainerSplit.selected;
        //text = null;

        //if (bn is AbstractDiagnostic)
        //{
        //    AbstractDiagnostic ad = (AbstractDiagnostic)bn;
        //    path = ad.ProjectFile;
        //    if (ad.IsTextShortened)
        //    {
        //        text = ad.Text;
        //    }
        //    else
        //    {
        //        text = sourceFileResolver.GetSourceFileText(path).Text;
        //    }
        //}
        //else if (bn is Project)
        //{
        //    path = ((Project)bn).SourceFilePath;
        //    text = sourceFileResolver.GetSourceFileText(path).Text;
        //}
        //else if (bn is Target)
        //{
        //    path = ((Target)ContainerSplit.selected).SourceFilePath;
        //    text = sourceFileResolver.GetSourceFileText(path).Text;
        //}
        //else if (bn is Microsoft.Build.Logging.StructuredLogger.Task)
        //{
        //    path = ((Microsoft.Build.Logging.StructuredLogger.Task)bn).SourceFilePath;
        //    text = sourceFileResolver.GetSourceFileText(path).Text;
        //}
        //else if (bn is IHasSourceFile && ((IHasSourceFile)bn).SourceFilePath != null)
        //{
        //    path = ((IHasSourceFile)bn).SourceFilePath;
        //    text = sourceFileResolver.GetSourceFileText(path).Text;
        //}
        //else if (bn is SourceFileLine && ((SourceFileLine)bn).Parent is Microsoft.Build.Logging.StructuredLogger.SourceFile
        //&& ((Microsoft.Build.Logging.StructuredLogger.SourceFile)((SourceFileLine)bn).Parent).SourceFilePath != null)
        //{
        //    path = ((Microsoft.Build.Logging.StructuredLogger.SourceFile)((SourceFileLine)bn).Parent).SourceFilePath;
        //    text = sourceFileResolver.GetSourceFileText(path).Text;
        //}
        //else if (bn is NameValueNode && ((NameValueNode)bn).IsValueShortened)
        //{
        //    text = ((NameValueNode)bn).Value;
        //}
        //else if (bn is TextNode && ((TextNode)bn).IsTextShortened)
        //{
        //    text = ((TextNode)bn).Text;
        //}

        //if (text == null)
        //{
        //    text = "No file to display";
        //}

    }

    public async System.Threading.Tasks.Task Exit()
    {
        ContainerSplit.show += 1;
        ContainerSplit.Render();
    }

    private bool CanOpenFile(BaseNode node, SourceFileResolver sourceFileResolver)
    {
        return node is Import i && sourceFileResolver.HasFile(i.ImportedProjectFilePath);
    }

    private bool CanView(BaseNode node, SourceFileResolver sourceFileResolver)
    {
        return node is AbstractDiagnostic
            || node is Project
            || (node is Target t && t.SourceFilePath != null && sourceFileResolver.HasFile(t.SourceFilePath))
            || (node is Microsoft.Build.Logging.StructuredLogger.Task task && task.Parent is Target parentTarget && sourceFileResolver.HasFile(parentTarget.SourceFilePath))
            || (node is IHasSourceFile ihsf && ihsf.SourceFilePath != null && sourceFileResolver.HasFile(ihsf.SourceFilePath))
            || (node is NameValueNode nvn && nvn.IsValueShortened)
            || (node is TextNode tn && tn.IsTextShortened);
    }
}
