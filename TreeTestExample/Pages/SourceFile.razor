@page "/SourceFile"
@using Microsoft.Build.Logging.StructuredLogger
@using StructuredLogViewer
@using System.IO

<button @onclick=Exit class="btn btn-primary">Close</button>
@text
@code {
        [CascadingParameter]
        public SplitPane ContainerSplit { get; set; }
        string text;

        public async System.Threading.Tasks.Task Exit()
        {
            ContainerSplit.show += 1;
            ContainerSplit.Render();
        }

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SourceFileResolver sourceFileResolver = new SourceFileResolver(ContainerSplit.build.SourceFilesArchive);
            //if (CanView(ContainerSplit.selected, sourceFileResolver) && CanOpenFile(ContainerSplit.selected, sourceFileResolver))
            //{
            string path = "";
            if (ContainerSplit.selected is AbstractDiagnostic)
            {
                path = ((AbstractDiagnostic)ContainerSplit.selected).ProjectFile;
            }
            else if (ContainerSplit.selected is Project)
            {
                path = ((Project)ContainerSplit.selected).SourceFilePath;
            }
            else if (ContainerSplit.selected is Target)
            {
                path = ((Target)ContainerSplit.selected).SourceFilePath;
            }
            else if (ContainerSplit.selected is Microsoft.Build.Logging.StructuredLogger.Task)
            {
                path = ((Target)((Microsoft.Build.Logging.StructuredLogger.Task)ContainerSplit.selected).Parent).SourceFilePath;
            }
            else if (ContainerSplit.selected is IHasSourceFile)
            {
                path = ((IHasSourceFile)ContainerSplit.selected).SourceFilePath;
            }
            else if (ContainerSplit.selected is NameValueNode)
            {
                //not sure
            }
            else if (ContainerSplit.selected is TextNode)
            {
                //not sure
            }


            text = sourceFileResolver.GetSourceFileText(path).Text;
            this.StateHasChanged();
            //}
        }
    }

    private bool CanOpenFile(BaseNode node, SourceFileResolver sourceFileResolver)
    {
        return node is Import i && sourceFileResolver.HasFile(i.ImportedProjectFilePath);
    }

    private bool CanView(BaseNode node, SourceFileResolver sourceFileResolver)
    {
        return node is AbstractDiagnostic
            || node is Project
            || (node is Target t && t.SourceFilePath != null && sourceFileResolver.HasFile(t.SourceFilePath))
            || (node is Microsoft.Build.Logging.StructuredLogger.Task task && task.Parent is Target parentTarget && sourceFileResolver.HasFile(parentTarget.SourceFilePath))
            || (node is IHasSourceFile ihsf && ihsf.SourceFilePath != null && sourceFileResolver.HasFile(ihsf.SourceFilePath))
            || (node is NameValueNode nvn && nvn.IsValueShortened)
            || (node is TextNode tn && tn.IsTextShortened);
    }
}
