@page "/SourceFile"
@using Microsoft.Build.Logging.StructuredLogger
@using StructuredLogViewer
@using System.IO
@using BlazorMonaco
@using BlazorMonaco.Bridge

<button @onclick=Exit style="float:right" class="btn btn-primary">Close</button>
<h3>@ContainerSplit.sfn</h3>


<br />
<br />
<br />

<MonacoEditor @ref="_editor" CssClass="code" Id="monaco-editor" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit"/>


@code {
    [CascadingParameter]
    public SplitPane ContainerSplit { get; set; }
    private MonacoEditor _editor { get; set; }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions()
        {
            ReadOnly = true,
            Value = ContainerSplit.SourceFileText,
            GlyphMargin = true,

        };
    }

    private async System.Threading.Tasks.Task EditorOnDidInit(MonacoEditor editor)
    {
        if (ContainerSplit.lineNumber != -1)
        {
            var newDecorations = new ModelDeltaDecoration[]
            {
            new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Bridge.Range(ContainerSplit.lineNumber,1,ContainerSplit.lineNumber,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
                };
            ContainerSplit.lineNumber = -1;
            await _editor.DeltaDecorations(null, newDecorations);
        }


    }

    protected override bool ShouldRender()
    {
        var renderUI = true;

        return renderUI;
    }

    public void Render()
    {
        this.StateHasChanged();
        _editor.SetValue(ContainerSplit.SourceFileText);
    }

    public async System.Threading.Tasks.Task Exit()
    {
        ContainerSplit.show += 1;
        ContainerSplit.Render();
    }

    private bool CanOpenFile(BaseNode node, SourceFileResolver sourceFileResolver)
    {
        return node is Import i && sourceFileResolver.HasFile(i.ImportedProjectFilePath);
    }

    private bool CanView(BaseNode node, SourceFileResolver sourceFileResolver)
    {
        return node is AbstractDiagnostic
            || node is Project
            || (node is Target t && t.SourceFilePath != null && sourceFileResolver.HasFile(t.SourceFilePath))
            || (node is Microsoft.Build.Logging.StructuredLogger.Task task && task.Parent is Target parentTarget && sourceFileResolver.HasFile(parentTarget.SourceFilePath))
            || (node is IHasSourceFile ihsf && ihsf.SourceFilePath != null && sourceFileResolver.HasFile(ihsf.SourceFilePath))
            || (node is NameValueNode nvn && nvn.IsValueShortened)
            || (node is TextNode tn && tn.IsTextShortened);
    }

}
