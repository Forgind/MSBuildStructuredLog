@page "/home"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager 

    <CascadingValue Value=this>
            @if (show % 2 == 1)
            {
                <body style="height:100%">
                    <div>
                        <div @ref="one" style="overflow-y:scroll" class="split" id="one">
                            @DrawTabs()
                        </div>
                        <div style="overflow-y:scroll" @ref="two" class="split" id="two">
                            <FileTree />
                        </div>
                        <div style="overflow-y:scroll" @ref="three" class="split" id="three">
                            @DrawSources()
                        </div>
                    </div>
                </body>
            }
            else
            {
                <body style="height:100%">
                    <div>
                        <div @ref="four" style="overflow-y:scroll" class="split" id="four">
                            @DrawTabs()
                        </div>
                        <div style="overflow-y:scroll" @ref="five" class="split" id="five">
                            <FileTree />
                        </div>
                    </div>
                </body>
            }
        </CascadingValue>



        @code {
            public int show;
            protected ElementReference one;
            protected ElementReference two;
            protected ElementReference three;
            protected ElementReference four;
            protected ElementReference five;
            public bool search;
            public Microsoft.Build.Logging.StructuredLogger.Build build;
            public Microsoft.Build.Logging.StructuredLogger.BaseNode selected;
            private SourceFile sf;
            private Tabs tabs;
            public StructuredLogViewer.ArchiveFileResolver afr;
            public StructuredLogViewer.SourceFileResolver sourceFileResolver;
            public IEnumerable<Microsoft.Build.Logging.StructuredLogger.BaseNode> files;
            
            public void Render()
            {
                this.StateHasChanged();
                if (sf != null)
                {
                    sf.Render();
                }
            }

            public void FileRender()
            {
                if (sf != null)
                {
                    sf.Render();
                }
            }

            public RenderFragment DrawTabs()
            {
                return new RenderFragment(builder =>
                {
                    builder.OpenComponent<Tabs>(0);
                    builder.AddComponentReferenceCapture(1, inst => { tabs = (Tabs)inst; });
                    builder.CloseComponent();
                });
            }

            public RenderFragment DrawSources()
            {
                return new RenderFragment(builder =>
                {
                    builder.OpenComponent<SourceFile>(0);
                    builder.AddComponentReferenceCapture(1, inst => { sf = (SourceFile)inst; });
                    builder.CloseComponent();
                });
            }

            protected override async Task OnAfterRenderAsync(bool firstRender)
            {
                if (show % 2 == 0 && !search)
                {
                    ElementReference[] arr2 = new ElementReference[2];
                    arr2[0] = four;
                    arr2[1] = five;
                    await JSRuntime.InvokeVoidAsync(identifier: "Split", arr2);
                }
                if (show % 2 == 1 && !search)
                {
                    ElementReference[] arr = new ElementReference[3];
                    arr[0] = one;
                    arr[1] = two;
                    arr[2] = three;
                    await JSRuntime.InvokeVoidAsync(identifier: "Split", arr);
                }
                search = false;
            }
        }
