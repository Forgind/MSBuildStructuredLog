@page "/Home"
    @using System.IO
    @using Microsoft.Build.Logging.StructuredLogger
    @using Radzen
    @using Radzen.Blazor
    @inject Blazor.FileReader.IFileReaderService fileReaderService

    <h1>Structured Log Viewer</h1>

    <input type="file" @ref=inputElement />
    <button @onclick=ReadFile class="btn btn-primary">Read file</button>
    <button @onclick=ClearFile class="btn btn-primary">Clear</button>
    
<h1>@test</h1>
    <br />
    <br />
    @if (binLogSelected)
    {
        <RadzenTree Data="@entries" Expand="@((TreeExpandEventArgs args) => {OnExpand(args);})">
            <RadzenTreeLevel Text="@GetTextForNode" 
                             HasChildren="@((node) => {
                                                if (node is TreeNode)
                                                    return ((TreeNode)node).HasChildren;
                                                else return false;
                                            })"/>
        </RadzenTree>
    }

    @code {
        bool binLogSelected = false;
        ElementReference inputElement;
        string test;

        IEnumerable<BaseNode> entries = null;

        string GetTextForNode(Object node)
        {
            return ((BaseNode)node).ToString();
        }

        void OnExpand(TreeExpandEventArgs args)
        {
            if(args.Value is TreeNode)
            {
                args.Children.Data = ((TreeNode)args.Value).Children;
                args.Children.Text = GetTextForNode;
                args.Children.HasChildren = (node) =>
                {
                    if (node is TreeNode)
                        return ((TreeNode)node).HasChildren;
                    else
                        return false;
                };
            } else
            {
                args.Children.Data = null;
                args.Children.Text = (Object obj) => (string) args.Value;
                args.Children.HasChildren = (Object obj) => false;
            }
        }

        public async System.Threading.Tasks.Task ClearFile()
        {
            await fileReaderService.CreateReference(inputElement).ClearValue();
        }

        public async System.Threading.Tasks.Task ReadFile()
        {
            var files = (await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync());
            foreach (Blazor.FileReader.IFileReference file in files)
            {
                var fileInfo = await file.ReadFileInfoAsync();
                String[] split = fileInfo.Name.Split(".");
                if (!String.Equals("binlog", split[split.Length - 1]))
                {
                    break;
                }
                binLogSelected = true;
                Task<Blazor.FileReader.AsyncDisposableStream>
        streamTask = file.OpenReadAsync();
                var stream = await streamTask;
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);

                memoryStream.Position = 0;

                Build build = Serialization.ReadBinLog(memoryStream);
                BuildAnalyzer.AnalyzeBuild(build);
                entries = (IEnumerable<BaseNode>)build.Children;
            }
            this.StateHasChanged();
        }

    }
